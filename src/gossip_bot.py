from telegram import Message, Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from env_config import Config
import random

# todo
lbg_people = []

gossip_text_starts = [
	"–Ø —Ç—É—Ç —Ç–∞–∫–µ –ø–æ—á—É–≤ üòÆ",
	"–¢—É—Ç —Ö–æ–¥—è—Ç—å —á—É—Ç–∫–∏, —â–æ...",
	"–Ü–Ω—Å–∞–π–¥—ñ–∫ –ø—ñ–¥'—ó—Ö–∞–≤ üïµÔ∏è",
	"–¢–∏ –Ω–µ –ø–æ–≤—ñ—Ä–∏—à, –∞–ª–µ",
	"–ö–∞–∂—É—Ç—å, —â–æ...",
	"–°–ª—É—Ö–∞–π, —â–æ —è –¥—ñ–∑–Ω–∞–≤—Å—è ü§Ø",
]

gossip_photo_starts = [
	"–ü–æ–¥–∏–≤–∏—Å—å –Ω–∞ —Ü–µ üò≤",
	"–¢—É—Ç —Ç–∞–∫–µ —Ñ–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏...",
	"–¢–∏ –±–∞—á–∏–≤ —Ü–µ? üò≥",
	"–¶–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ!",
	"–©–æ —Å–∫–∞–∂–µ—à –Ω–∞ —Ü–µ? üì∏",
	"–û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤ ü§Ø",
]

config = Config()

# Command handler for '/start'
async def start_async(update: Update, context: ContextTypes.DEFAULT_TYPE):
	if access_granted(update):
		await update.message.reply_text("–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ –≤ —á–∞—Ç.")
	else:
		await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")

# Command handler for '/help'
async def help_async(update: Update, context: ContextTypes.DEFAULT_TYPE):
	text = \
	"""
		–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω—ñ, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ —É –æ–±—Ä–∞–Ω–∏–π —á–∞—Ç.\n
		–Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @eltagun.

		V 2.0
	"""
	await update.message.reply_text(text)

# Command handler for '/enable'
async def enable_async(update: Update, context: ContextTypes.DEFAULT_TYPE):
	if not update.effective_chat.type == 'group' and not update.effective_chat.type == 'supergroup':
		await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö.")
		return

	if not access_granted(update):
		await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
		return

	config.set_forvarding(config.is_forwarding_enable() is False)
	await update.message.reply_text(f"–ë–æ—Ç–∞ {'–≤–≤—ñ–º–∫–Ω–µ–Ω–æ' if config.is_forwarding_enable() else '–≤–∏–º–∫–Ω–µ–Ω–æ'}!")

# Message handler for forwarding messages
async def forward_message_async(update: Update, context: ContextTypes.DEFAULT_TYPE):

	if not access_granted(update):
		await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –≥–æ—Å—ñ–ø—ñ–≤ ü•≤")
		return
	
	if update.effective_chat.type == 'group' or update.effective_chat.type == 'supergroup':
		return

	if config.is_forwarding_enable() is False:
		await update.message.reply_text("–ë–æ—Ç–∞ –≤ –≥—Ä—É–ø—ñ –±—É–ª–æ –≤–∏–º–∫–Ω–µ–Ω–æ!")
		return

	# todo catch exceptions
	if update.message.text:
		await forward_text_async(update.message.text, context)
	elif update.message.media_group_id:
		await forward_media_group_async(update, context)
		return
	elif update.message.photo:
		await forward_photo_async(update.message, context)
	else:
		await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
		return

	await update.message.reply_text("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")

async def forward_text_async(text: str, context: ContextTypes.DEFAULT_TYPE):
	start_msg = random.choice(gossip_text_starts)
	text = f"üó£Ô∏è <b>{start_msg}</b>\n<blockquote>{text}</blockquote>"

	await context.bot.send_message(
		chat_id=config.get_chat_id(),
		text=text,
		parse_mode='HTML')

async def forward_photo_async(message: Message, context: ContextTypes.DEFAULT_TYPE):
	text = None
	if message.caption is not None:
		start_msg = random.choice(gossip_photo_starts)
		text = f"üó£Ô∏è <b>{start_msg}</b>\n<blockquote>{message.caption}</blockquote>"

	fileID = message.photo[-1]['file_id']
	await context.bot.send_photo(
		chat_id=config.get_chat_id(),
		photo = fileID,
		caption = text,
		parse_mode='HTML')

async def forward_media_group_async(update: Update, context: ContextTypes.DEFAULT_TYPE):
	await update.message.reply_text("–Ø –Ω–µ –≤–º—ñ—é –≤ –≥—Ä—É–ø–æ–≤—ñ —Ñ–æ—Ç–æüò¢. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ó—Ö –ø–æ –æ–¥–Ω–æ–º—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º(–∞–±–æ –±–µ–∑)")
	return

def access_granted(update: Update) -> bool:
	if not config.is_access_check_enable():
		return True

	user_tag = update.effective_user.username
	if user_tag in config.get_coreteam_people():
		return True

	if user_tag in lbg_people:
		return True
	return False

def main():
	application = ApplicationBuilder().token(config.get_access_token()).build()

	application.add_handler(CommandHandler("start", start_async))
	application.add_handler(CommandHandler("help", help_async))
	application.add_handler(CommandHandler("enable", enable_async))

	# tbd /set_public_password

	application.add_handler(MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, forward_message_async))

	application.run_polling()
	print("Bot is running...")

if __name__ == "__main__":
	main()
